// Generated by Ignite ignite.com/cli

import { SigningStargateClient, DeliverTxResponse, StdFee } from "@cosmjs/stargate";
import { EncodeObject, GeneratedType, OfflineSigner, Registry } from "@cosmjs/proto-signing";
import { msgTypes } from './registry';
import { IgniteClient } from "../client"
import { MissingWalletError } from "../helpers"
import { Api } from "./rest";
import { MsgUpdateResource } from "./types/bryanchain/bryanchain/tx";
import { MsgUpdateResourceResponse } from "./types/bryanchain/bryanchain/tx";
import { MsgDeleteResourceResponse } from "./types/bryanchain/bryanchain/tx";
import { Params } from "./types/bryanchain/bryanchain/params";
import { QueryParamsResponse } from "./types/bryanchain/bryanchain/query";
import { QueryGetResourceRequest } from "./types/bryanchain/bryanchain/query";
import { MsgDeleteResource } from "./types/bryanchain/bryanchain/tx";
import { GenesisState } from "./types/bryanchain/bryanchain/genesis";
import { QueryParamsRequest } from "./types/bryanchain/bryanchain/query";
import { QueryGetResourceResponse } from "./types/bryanchain/bryanchain/query";
import { QueryAllResourceResponse } from "./types/bryanchain/bryanchain/query";
import { MsgCreateResourceResponse } from "./types/bryanchain/bryanchain/tx";
import { QueryAllResourceRequest } from "./types/bryanchain/bryanchain/query";
import { MsgUpdateParams } from "./types/bryanchain/bryanchain/tx";
import { MsgCreateResource } from "./types/bryanchain/bryanchain/tx";
import { Resource } from "./types/bryanchain/bryanchain/resource";
import { MsgUpdateParamsResponse } from "./types/bryanchain/bryanchain/tx";


export { MsgUpdateResource, MsgUpdateResourceResponse, MsgDeleteResourceResponse, Params, QueryParamsResponse, QueryGetResourceRequest, MsgDeleteResource, GenesisState, QueryParamsRequest, QueryGetResourceResponse, QueryAllResourceResponse, MsgCreateResourceResponse, QueryAllResourceRequest, MsgUpdateParams, MsgCreateResource, Resource, MsgUpdateParamsResponse };

type sendMsgUpdateResourceParams = {
  value: MsgUpdateResource,
  fee?: StdFee,
  memo?: string
};

type sendMsgUpdateResourceResponseParams = {
  value: MsgUpdateResourceResponse,
  fee?: StdFee,
  memo?: string
};

type sendMsgDeleteResourceResponseParams = {
  value: MsgDeleteResourceResponse,
  fee?: StdFee,
  memo?: string
};

type sendParamsParams = {
  value: Params,
  fee?: StdFee,
  memo?: string
};

type sendQueryParamsResponseParams = {
  value: QueryParamsResponse,
  fee?: StdFee,
  memo?: string
};

type sendQueryGetResourceRequestParams = {
  value: QueryGetResourceRequest,
  fee?: StdFee,
  memo?: string
};

type sendMsgDeleteResourceParams = {
  value: MsgDeleteResource,
  fee?: StdFee,
  memo?: string
};

type sendGenesisStateParams = {
  value: GenesisState,
  fee?: StdFee,
  memo?: string
};

type sendQueryParamsRequestParams = {
  value: QueryParamsRequest,
  fee?: StdFee,
  memo?: string
};

type sendQueryGetResourceResponseParams = {
  value: QueryGetResourceResponse,
  fee?: StdFee,
  memo?: string
};

type sendQueryAllResourceResponseParams = {
  value: QueryAllResourceResponse,
  fee?: StdFee,
  memo?: string
};

type sendMsgCreateResourceResponseParams = {
  value: MsgCreateResourceResponse,
  fee?: StdFee,
  memo?: string
};

type sendQueryAllResourceRequestParams = {
  value: QueryAllResourceRequest,
  fee?: StdFee,
  memo?: string
};

type sendMsgUpdateParamsParams = {
  value: MsgUpdateParams,
  fee?: StdFee,
  memo?: string
};

type sendMsgCreateResourceParams = {
  value: MsgCreateResource,
  fee?: StdFee,
  memo?: string
};

type sendResourceParams = {
  value: Resource,
  fee?: StdFee,
  memo?: string
};

type sendMsgUpdateParamsResponseParams = {
  value: MsgUpdateParamsResponse,
  fee?: StdFee,
  memo?: string
};


type msgUpdateResourceParams = {
  value: MsgUpdateResource,
};

type msgUpdateResourceResponseParams = {
  value: MsgUpdateResourceResponse,
};

type msgDeleteResourceResponseParams = {
  value: MsgDeleteResourceResponse,
};

type paramsParams = {
  value: Params,
};

type queryParamsResponseParams = {
  value: QueryParamsResponse,
};

type queryGetResourceRequestParams = {
  value: QueryGetResourceRequest,
};

type msgDeleteResourceParams = {
  value: MsgDeleteResource,
};

type genesisStateParams = {
  value: GenesisState,
};

type queryParamsRequestParams = {
  value: QueryParamsRequest,
};

type queryGetResourceResponseParams = {
  value: QueryGetResourceResponse,
};

type queryAllResourceResponseParams = {
  value: QueryAllResourceResponse,
};

type msgCreateResourceResponseParams = {
  value: MsgCreateResourceResponse,
};

type queryAllResourceRequestParams = {
  value: QueryAllResourceRequest,
};

type msgUpdateParamsParams = {
  value: MsgUpdateParams,
};

type msgCreateResourceParams = {
  value: MsgCreateResource,
};

type resourceParams = {
  value: Resource,
};

type msgUpdateParamsResponseParams = {
  value: MsgUpdateParamsResponse,
};


export const registry = new Registry(msgTypes);

type Field = {
	name: string;
	type: unknown;
}
function getStructure(template) {
	const structure: {fields: Field[]} = { fields: [] }
	for (let [key, value] of Object.entries(template)) {
		let field = { name: key, type: typeof value }
		structure.fields.push(field)
	}
	return structure
}
const defaultFee = {
  amount: [],
  gas: "200000",
};

interface TxClientOptions {
  addr: string
	prefix: string
	signer?: OfflineSigner
}

export const txClient = ({ signer, prefix, addr }: TxClientOptions = { addr: "http://localhost:26657", prefix: "cosmos" }) => {

  return {
		
		async sendMsgUpdateResource({ value, fee, memo }: sendMsgUpdateResourceParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendMsgUpdateResource: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.msgUpdateResource({ value: MsgUpdateResource.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendMsgUpdateResource: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendMsgUpdateResourceResponse({ value, fee, memo }: sendMsgUpdateResourceResponseParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendMsgUpdateResourceResponse: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.msgUpdateResourceResponse({ value: MsgUpdateResourceResponse.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendMsgUpdateResourceResponse: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendMsgDeleteResourceResponse({ value, fee, memo }: sendMsgDeleteResourceResponseParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendMsgDeleteResourceResponse: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.msgDeleteResourceResponse({ value: MsgDeleteResourceResponse.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendMsgDeleteResourceResponse: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendParams({ value, fee, memo }: sendParamsParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendParams: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.params({ value: Params.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendParams: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendQueryParamsResponse({ value, fee, memo }: sendQueryParamsResponseParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendQueryParamsResponse: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.queryParamsResponse({ value: QueryParamsResponse.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendQueryParamsResponse: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendQueryGetResourceRequest({ value, fee, memo }: sendQueryGetResourceRequestParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendQueryGetResourceRequest: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.queryGetResourceRequest({ value: QueryGetResourceRequest.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendQueryGetResourceRequest: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendMsgDeleteResource({ value, fee, memo }: sendMsgDeleteResourceParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendMsgDeleteResource: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.msgDeleteResource({ value: MsgDeleteResource.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendMsgDeleteResource: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendGenesisState({ value, fee, memo }: sendGenesisStateParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendGenesisState: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.genesisState({ value: GenesisState.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendGenesisState: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendQueryParamsRequest({ value, fee, memo }: sendQueryParamsRequestParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendQueryParamsRequest: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.queryParamsRequest({ value: QueryParamsRequest.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendQueryParamsRequest: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendQueryGetResourceResponse({ value, fee, memo }: sendQueryGetResourceResponseParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendQueryGetResourceResponse: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.queryGetResourceResponse({ value: QueryGetResourceResponse.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendQueryGetResourceResponse: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendQueryAllResourceResponse({ value, fee, memo }: sendQueryAllResourceResponseParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendQueryAllResourceResponse: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.queryAllResourceResponse({ value: QueryAllResourceResponse.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendQueryAllResourceResponse: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendMsgCreateResourceResponse({ value, fee, memo }: sendMsgCreateResourceResponseParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendMsgCreateResourceResponse: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.msgCreateResourceResponse({ value: MsgCreateResourceResponse.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendMsgCreateResourceResponse: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendQueryAllResourceRequest({ value, fee, memo }: sendQueryAllResourceRequestParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendQueryAllResourceRequest: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.queryAllResourceRequest({ value: QueryAllResourceRequest.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendQueryAllResourceRequest: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendMsgUpdateParams({ value, fee, memo }: sendMsgUpdateParamsParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendMsgUpdateParams: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.msgUpdateParams({ value: MsgUpdateParams.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendMsgUpdateParams: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendMsgCreateResource({ value, fee, memo }: sendMsgCreateResourceParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendMsgCreateResource: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.msgCreateResource({ value: MsgCreateResource.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendMsgCreateResource: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendResource({ value, fee, memo }: sendResourceParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendResource: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.resource({ value: Resource.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendResource: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendMsgUpdateParamsResponse({ value, fee, memo }: sendMsgUpdateParamsResponseParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendMsgUpdateParamsResponse: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.msgUpdateParamsResponse({ value: MsgUpdateParamsResponse.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendMsgUpdateParamsResponse: Could not broadcast Tx: '+ e.message)
			}
		},
		
		
		msgUpdateResource({ value }: msgUpdateResourceParams): EncodeObject {
			try {
				return { typeUrl: "/bryanchain.bryanchain.MsgUpdateResource", value: MsgUpdateResource.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:MsgUpdateResource: Could not create message: ' + e.message)
			}
		},
		
		msgUpdateResourceResponse({ value }: msgUpdateResourceResponseParams): EncodeObject {
			try {
				return { typeUrl: "/bryanchain.bryanchain.MsgUpdateResourceResponse", value: MsgUpdateResourceResponse.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:MsgUpdateResourceResponse: Could not create message: ' + e.message)
			}
		},
		
		msgDeleteResourceResponse({ value }: msgDeleteResourceResponseParams): EncodeObject {
			try {
				return { typeUrl: "/bryanchain.bryanchain.MsgDeleteResourceResponse", value: MsgDeleteResourceResponse.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:MsgDeleteResourceResponse: Could not create message: ' + e.message)
			}
		},
		
		params({ value }: paramsParams): EncodeObject {
			try {
				return { typeUrl: "/bryanchain.bryanchain.Params", value: Params.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:Params: Could not create message: ' + e.message)
			}
		},
		
		queryParamsResponse({ value }: queryParamsResponseParams): EncodeObject {
			try {
				return { typeUrl: "/bryanchain.bryanchain.QueryParamsResponse", value: QueryParamsResponse.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:QueryParamsResponse: Could not create message: ' + e.message)
			}
		},
		
		queryGetResourceRequest({ value }: queryGetResourceRequestParams): EncodeObject {
			try {
				return { typeUrl: "/bryanchain.bryanchain.QueryGetResourceRequest", value: QueryGetResourceRequest.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:QueryGetResourceRequest: Could not create message: ' + e.message)
			}
		},
		
		msgDeleteResource({ value }: msgDeleteResourceParams): EncodeObject {
			try {
				return { typeUrl: "/bryanchain.bryanchain.MsgDeleteResource", value: MsgDeleteResource.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:MsgDeleteResource: Could not create message: ' + e.message)
			}
		},
		
		genesisState({ value }: genesisStateParams): EncodeObject {
			try {
				return { typeUrl: "/bryanchain.bryanchain.GenesisState", value: GenesisState.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:GenesisState: Could not create message: ' + e.message)
			}
		},
		
		queryParamsRequest({ value }: queryParamsRequestParams): EncodeObject {
			try {
				return { typeUrl: "/bryanchain.bryanchain.QueryParamsRequest", value: QueryParamsRequest.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:QueryParamsRequest: Could not create message: ' + e.message)
			}
		},
		
		queryGetResourceResponse({ value }: queryGetResourceResponseParams): EncodeObject {
			try {
				return { typeUrl: "/bryanchain.bryanchain.QueryGetResourceResponse", value: QueryGetResourceResponse.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:QueryGetResourceResponse: Could not create message: ' + e.message)
			}
		},
		
		queryAllResourceResponse({ value }: queryAllResourceResponseParams): EncodeObject {
			try {
				return { typeUrl: "/bryanchain.bryanchain.QueryAllResourceResponse", value: QueryAllResourceResponse.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:QueryAllResourceResponse: Could not create message: ' + e.message)
			}
		},
		
		msgCreateResourceResponse({ value }: msgCreateResourceResponseParams): EncodeObject {
			try {
				return { typeUrl: "/bryanchain.bryanchain.MsgCreateResourceResponse", value: MsgCreateResourceResponse.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:MsgCreateResourceResponse: Could not create message: ' + e.message)
			}
		},
		
		queryAllResourceRequest({ value }: queryAllResourceRequestParams): EncodeObject {
			try {
				return { typeUrl: "/bryanchain.bryanchain.QueryAllResourceRequest", value: QueryAllResourceRequest.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:QueryAllResourceRequest: Could not create message: ' + e.message)
			}
		},
		
		msgUpdateParams({ value }: msgUpdateParamsParams): EncodeObject {
			try {
				return { typeUrl: "/bryanchain.bryanchain.MsgUpdateParams", value: MsgUpdateParams.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:MsgUpdateParams: Could not create message: ' + e.message)
			}
		},
		
		msgCreateResource({ value }: msgCreateResourceParams): EncodeObject {
			try {
				return { typeUrl: "/bryanchain.bryanchain.MsgCreateResource", value: MsgCreateResource.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:MsgCreateResource: Could not create message: ' + e.message)
			}
		},
		
		resource({ value }: resourceParams): EncodeObject {
			try {
				return { typeUrl: "/bryanchain.bryanchain.Resource", value: Resource.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:Resource: Could not create message: ' + e.message)
			}
		},
		
		msgUpdateParamsResponse({ value }: msgUpdateParamsResponseParams): EncodeObject {
			try {
				return { typeUrl: "/bryanchain.bryanchain.MsgUpdateParamsResponse", value: MsgUpdateParamsResponse.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:MsgUpdateParamsResponse: Could not create message: ' + e.message)
			}
		},
		
	}
};

interface QueryClientOptions {
  addr: string
}

export const queryClient = ({ addr: addr }: QueryClientOptions = { addr: "http://localhost:1317" }) => {
  return new Api({ baseURL: addr });
};

class SDKModule {
	public query: ReturnType<typeof queryClient>;
	public tx: ReturnType<typeof txClient>;
	public structure: Record<string,unknown>;
	public registry: Array<[string, GeneratedType]> = [];

	constructor(client: IgniteClient) {		
	
		this.query = queryClient({ addr: client.env.apiURL });		
		this.updateTX(client);
		this.structure =  {
						
		};
		client.on('signer-changed',(signer) => {			
		 this.updateTX(client);
		})
	}
	updateTX(client: IgniteClient) {
    const methods = txClient({
        signer: client.signer,
        addr: client.env.rpcURL,
        prefix: client.env.prefix ?? "cosmos",
    })
	
    this.tx = methods;
    for (let m in methods) {
        this.tx[m] = methods[m].bind(this.tx);
    }
	}
};

const IgntModule = (test: IgniteClient) => {
	return {
		module: {
			BryanchainBryanchain: new SDKModule(test)
		},
		registry: msgTypes
  }
}
export default IgntModule;